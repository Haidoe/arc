// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  externalId  String       @unique
  created     DateTime     @default(now())
  email       String       @unique
  name        String?
  company     String?
  title       String?
  productionIds String[]
  productions Production[]
}

model Production {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  directors   Director[]
  
  producer   User?      @relation(fields: [producerId], references: [externalId])
  producerId String

  description String
  locations   Location[]
  crews       Crew[]
  scenes      Int[]
  duration    Duration
  totalHours  Int?
  scriptSupervisor String
  dataWrangler     String
  created DateTime @default(now())
  updated DateTime @updatedAt
  report ProductionReport[]
  reportIds String[]
}

type Director {
  name  String
  title String
}

type Location {
  name        String
  address     String
  city        String
  state       String
  zip         String
  country     String
  coordinates Float[]
}

type Crew {
  name String
  role String
}

type Duration {
  startDate           DateTime
  estimatedFinishDate DateTime
}


//For Testing
model Example {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  content String?
  created DateTime? @default(now())
  updated DateTime? @updatedAt
}




// =====================> Model and Type for Production Report <=====================


model ProductionReport {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  // optional fields
  Production   Production? @relation(fields: [productionId], references: [id])
  productionId String?     @db.ObjectId
  created    DateTime    @default(now())
  updated    DateTime    @updatedAt


  // form fields - Type 1 -> input only
  startDate DateTime?
  scheduleForDay scheduleForDay // made json instead of type because dynamic type
  notShotScene NotShotScene[]
  
  shotScene Scenes[]
  castTimeLog CastTimeLog[]
  extras Extras[]  

  // form fields - Type 2 -> Mixed
  rolls Rolls[]
  actualSchedule ActualSchedule[]   
}

type NotShotScene {
  number Int
  description String
}

type Rolls {
  scriptSupervisor String
  dataWrangler String
  entries RollEntries[]
}

type RollEntries {
  name String
  previously Int
  today Int
  toDate Int
}


type Extras {
  qty Int
  name String
  notes String
  schedule ExtraSchedule
}

type ExtraSchedule {
  in DateTime
  out DateTime
  meal DateTime
  rate Int
  rateType String
}



type Scenes {
  number Int
  set String
  casts String[]
  location String
  dayOrNight String
  pages Pages
  Location String
}

type Pages {
  total Int
  portion Int
  completed Int
}


// dynamic type 
type scheduleForDay {
  breakfastFrom DateTime?
  breakfastTo DateTime?
  crewCallFrom DateTime?
  crewCallTo DateTime?
  shootingCallFrom DateTime?
  shootingCallTo DateTime?
  lunchFrom DateTime?
  lunchTo DateTime?
}


type CastTimeLog {
  cast String
  character String
  status String
  workSchedule WorkScheduleObject
  meals mealsObject 
}


type mealsObject {
  lunchIn DateTime?
  lunchOut DateTime?
  secondMealIn DateTime?
  secondMealOut DateTime?
}
type WorkScheduleObject {
    muReport DateTime?
    onSet DateTime?
    setWrap DateTime?
    setDismiss DateTime?
  }

type ActualSchedule  {
  name String
  schedule Int
  actual Int
}

